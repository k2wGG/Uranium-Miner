// cli/menu.cjs
/**
 * –ì–ª–∞–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏ (CJS).
 * –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å inquirer@8 –∏ chalk@4.
 * –§–∏–∫—Å—ã: –æ—Ç–∫–ª—é—á–µ–Ω —Ü–∏–∫–ª (loop:false), pageSize = —á–∏—Å–ª—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–∑–∫–∏–π –±–∞–Ω–Ω–µ—Ä –Ω–∞ Windows.
 * –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—É–Ω–∫—Ç—ã –º–∞—Å—Å–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ¬ª, ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ¬ª.
 */

const inquirer = require('inquirer'); // npm i inquirer@8
const chalk = require('chalk');       // npm i chalk@4
const { Separator } = inquirer;
let figlet = null; try { figlet = require('figlet'); } catch {}

const { initSessionsMenu } = require('./sessions.cjs');
const { listAccounts, addAccount, deleteAccount, checkCookies, editConfig } = require('./helpers.cjs');
const { listProxies, addProxy, deleteProxy } = require('./proxies.cjs');
const { startBot, startBotsBatch, stopBot, restartBot, listRunning, stopAllBots } = require('./manager.cjs');

const IS_WIN = process.platform === 'win32';
const EMOJI = process.env.FORCE_EMOJI ? true : !IS_WIN;
const ico = (e, fallback='') => (EMOJI ? e : fallback);

// –∫–µ—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–ª—è ¬´–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ¬ª
let _cachedSelection = [];

function showBanner() {
  console.clear();
  const font = IS_WIN ? 'Standard' : 'ANSI Shadow';
  if (figlet && typeof figlet.textSync === 'function') {
    try { console.log(chalk.green(figlet.textSync('N3R', { font }))); }
    catch { console.log(chalk.green('\n=== N3R ===\n')); }
  } else {
    console.log(chalk.green('\n=== N3R ===\n'));
  }
  console.log(chalk.cyan('Web3 / Nodes Manager CLI by @NodesN3R\n'));
}

async function askList({ message, items }) {
  const { value } = await inquirer.prompt([{
    type: 'list',
    name: 'value',
    message,
    choices: items,
    pageSize: items.length,
    loop: false
  }]);
  return value;
}

// –µ–¥–∏–Ω—ã–π —á–µ–∫–±–æ–∫—Å-–¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
async function pickAccounts({ accounts, preselected = [] }) {
  const { accs } = await inquirer.prompt([{
    type: 'checkbox',
    name: 'accs',
    message: '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã:',
    choices: accounts.map(a => ({ name: a, value: a })),
    default: preselected,
    validate: arr => arr.length ? true : '–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç',
    pageSize: Math.max(3, Math.min(accounts.length, 20)),
    loop: false
  }]);
  return accs;
}

async function mainMenu() {
  showBanner();

  while (true) {
    try {
      const value = await askList({
        message: chalk.cyan('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:'),
        items: [
          { name: `${ico('üë•','-')} –ê–∫–∫–∞—É–Ω—Ç—ã`, value: 'accounts' },
          { name: `${ico('üåê','-')} –ü—Ä–æ–∫—Å–∏`, value: 'proxies' },
          new Separator(),
          { name: `${ico('üîë','-')} –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏–∏ (–ª–æ–≥–∏–Ω)`, value: 'sessions' },
          { name: `${ico('ü§ñ','-')} –ë–æ—Ç—ã`, value: 'bots' },
          { name: `${ico('‚öôÔ∏è','-')} –ö–æ–Ω—Ñ–∏–≥`, value: 'config' },
          { name: `${ico('üìú','-')} –õ–æ–≥–∏`, value: 'logs' },
          new Separator(),
          { name: `${ico('üö™','-')} –í—ã—Ö–æ–¥`, value: 'exit' }
        ]
      });

      if (value === 'accounts')       await accountsMenu();
      else if (value === 'proxies')   await proxiesMenu();
      else if (value === 'sessions')  await initSessionsMenu();
      else if (value === 'bots')      await botsMenu();
      else if (value === 'config')    await configMenu();
      else if (value === 'logs')      await logsMenu();
      else if (value === 'exit') {
        await stopAllBots();
        console.log(chalk.yellow('üëã –í—ã—Ö–æ–¥'));
        process.exit(0);
      }
    } catch (e) {
      console.log(chalk.red(`–û—à–∏–±–∫–∞: ${e.message}`));
    }
  }
}

async function accountsMenu() {
  const accounts = await safeListAccounts();

  const value = await askList({
    message: chalk.green('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:'),
    items: [
      { name: `${ico('‚ûï','+')} –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç`, value: 'add' },
      { name: `${ico('‚ùå','x')} –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç`, value: 'del' },
      { name: `${ico('üîç','>')} –ü—Ä–æ–≤–µ—Ä–∏—Ç—å cookies`, value: 'check' },
      new Separator(),
      { name: '–ù–∞–∑–∞–¥', value: 'back' }
    ]
  });

  if (value === 'add')   await addAccount();
  if (value === 'del')   await deleteAccount(accounts);
  if (value === 'check') await checkCookies(accounts);
}

async function proxiesMenu() {
  const value = await askList({
    message: chalk.green('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏:'),
    items: [
      { name: `${ico('üìú','>')} –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏`, value: 'list' },
      { name: `${ico('‚ûï','+')} –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏`, value: 'add' },
      { name: `${ico('‚ùå','x')} –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏`, value: 'del' },
      new Separator(),
      { name: '–ù–∞–∑–∞–¥', value: 'back' }
    ]
  });

  if (value === 'list') await listProxies();
  if (value === 'add')  await addProxy();
  if (value === 'del')  await deleteProxy();
}

async function botsMenu() {
  const accounts = await safeListAccounts();
  const running  = listRunning();

  const value = await askList({
    message: chalk.green('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏:'),
    items: [
      { name: `${ico('‚ñ∂Ô∏è','>')} –ó–∞–ø—É—Å—Ç–∏—Ç—å 1 –±–æ—Ç–∞`, value: 'startOne' },
      { name: '‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ', value: 'startSelected' },
      { name: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã', value: 'startAll' },
      { name: `${ico('‚è∏','| |')} –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞`, value: 'stop' },
      { name: `${ico('üîÑ','~')} –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞`, value: 'restart' },
      { name: `${ico('üìã','>')} –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö`, value: 'ls' },
      new Separator(),
      { name: '–ù–∞–∑–∞–¥', value: 'back' }
    ]
  });

  if (value === 'startOne') {
    // –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤–Ω—É—Ç—Ä–∏ startBot()
    await startBot();
    return;
  }

  if (value === 'startSelected') {
    if (!accounts.length) {
      console.log(chalk.yellow('–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ ./profiles'));
      return;
    }
    // –µ—Å–ª–∏ —É–∂–µ –≤—ã–±–∏—Ä–∞–ª–∏ —Ä–∞–Ω—å—à–µ ‚Äî –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    const list = _cachedSelection.length
      ? _cachedSelection
      : await pickAccounts({ accounts });

    if (!list.length) return;
    _cachedSelection = list;

    // –ø–µ—Ä–µ–¥–∞—ë–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
    await startBotsBatch({ profiles: list });
    return;
  }

  if (value === 'startAll') {
    if (!accounts.length) {
      console.log(chalk.yellow('–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ ./profiles'));
      return;
    }
    _cachedSelection = [...accounts];
    await startBotsBatch({ profiles: accounts });
    return;
  }

  if (value === 'stop')    { await stopBot(running); return; }
  if (value === 'restart') { await restartBot(running); return; }
  if (value === 'ls') {
    console.log(chalk.cyan('–ê–∫—Ç–∏–≤–Ω—ã–µ:'), running.length ? running.join(', ') : '–Ω–µ—Ç');
  }
}

async function configMenu() {
  const accounts = await safeListAccounts();
  await editConfig(accounts);
}

async function logsMenu() {
  console.log(
    chalk.yellow(
      '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ config.json –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ "showClientLogs".\n' +
      '–ü—Ä–∏–º–µ—Ä:\n{\n  "showClientLogs": false\n}\n'
    )
  );
}

async function safeListAccounts() {
  try { return await listAccounts(); }
  catch (e) {
    console.log(chalk.red(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${e.message}`));
    return [];
  }
}

mainMenu();
