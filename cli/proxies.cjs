// cli/proxies.cjs
/**
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–∫—Å–∏.
 *
 * –ù–û–í–û–ï:
 *  - –ë–µ–∑ ¬´–∫—Ä–∞—à–µ–π¬ª –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –±–æ–ª—å—à–æ–≥–æ —Å–ø–∏—Å–∫–∞ (50+ —Å—Ç—Ä–æ–∫): —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä.
 *  - –ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞.
 *  - –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è, –∞–≤—Ç–æ-—Ç—Ä–∏–º, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —Å—Ç—Ä–æ–∫.
 *  - –ü–æ–Ω–∏–º–∞–µ—Ç –ª—é–±—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –ø—Ä–æ–±–µ–ª—ã, –∑–∞–ø—è—Ç—ã–µ, ;, |, —Ç–∞–±—ã.
 *
 * –§–∞–π–ª –∏—â–µ—Ç—Å—è —Ç—É—Ç: ./data/proxies.txt –ò–õ–ò ./proxies.txt (–≤ –∫–æ—Ä–Ω–µ).
 */

const fs = require('fs');
const fsp = require('fs/promises');
const path = require('path');
const os = require('os');
const inquirer = require('inquirer'); // v8 (CommonJS)
const chalk = require('chalk');

const NL = os.EOL;
const CANDIDATES = [
  path.resolve('data', 'proxies.txt'),
  path.resolve('proxies.txt')
];

let _proxiesPath = null;

async function ensureFile() {
  if (_proxiesPath) return _proxiesPath;

  const existing = CANDIDATES.filter(p => fs.existsSync(p));
  if (existing.length === 1) {
    _proxiesPath = existing[0];
    return _proxiesPath;
  }
  if (existing.length > 1) {
    const { use } = await inquirer.prompt([{
      type: 'list',
      name: 'use',
      message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–≤–∞ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∫—Å–∏. –ö–∞–∫–æ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?',
      choices: existing,
      loop: false,
      pageSize: existing.length
    }]);
    _proxiesPath = use;
    return _proxiesPath;
  }

  // –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ ‚Üí —Å–æ–∑–¥–∞—ë–º ./data/proxies.txt
  _proxiesPath = CANDIDATES[0];
  await fsp.mkdir(path.dirname(_proxiesPath), { recursive: true });
  await fsp.writeFile(_proxiesPath, '', 'utf8');
  return _proxiesPath;
}

async function readLines(file) {
  try {
    const txt = await fsp.readFile(file, 'utf8');
    return txt.split(/\r?\n/).map(s => s.trim()).filter(Boolean);
  } catch {
    return [];
  }
}

async function writeLines(file, lines) {
  const body = lines.join(NL) + (lines.length ? NL : '');
  await fsp.writeFile(file, body, 'utf8');
}

function splitMany(raw) {
  // –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º: –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –∑–∞–ø—è—Ç—ã–µ, –ø—Ä–æ–±–µ–ª—ã, ; | —Ç–∞–±—ã
  return String(raw || '')
    .split(/[\r\n,;|\t ]+/g)
    .map(s => s.trim())
    .filter(Boolean);
}

async function listProxies() {
  const file = await ensureFile();
  const lines = await readLines(file);
  if (!lines.length) {
    console.log(chalk.yellow(`‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç (${file})`));
    return [];
  }
  console.log(chalk.cyan(`üåê –§–∞–π–ª –ø—Ä–æ–∫—Å–∏: ${file}`));
  lines.forEach((p, i) => console.log(`${i + 1}. ${p}`));
  return lines;
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏:
 *  - ¬´–ë—ã—Å—Ç—Ä–æ–µ¬ª (–æ–¥–Ω–æ/–Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–ø—Ä–æ–±–µ–ª—ã)
 *  - ¬´–ú–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫¬ª (—á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è 50+ —Å—Ç—Ä–æ–∫)
 *  - ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞¬ª
 */
async function addProxy() {
  const file = await ensureFile();

  const { mode } = await inquirer.prompt([{
    type: 'list',
    name: 'mode',
    message: '–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏?',
    choices: [
      { name: '‚ûï –í–≤–µ—Å—Ç–∏ –∑–¥–µ—Å—å (–æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–ø—Ä–æ–±–µ–ª—ã)', value: 'inline' },
      { name: 'üìù –í—Å—Ç–∞–≤–∏—Ç—å –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫ (–æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–æ—Ä ‚Äî —É–¥–æ–±–Ω–æ –¥–ª—è 50+)', value: 'editor' },
      { name: 'üì• –ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞', value: 'file' }
    ],
    loop: false,
    pageSize: 3
  }]);

  let incoming = [];

  if (mode === 'inline') {
    const { proxyRaw } = await inquirer.prompt([{
      type: 'input',
      name: 'proxyRaw',
      message: '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ (host:port –∏–ª–∏ user:pass@host:port). –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é/–ø—Ä–æ–±–µ–ª—ã/; :'
    }]);
    incoming = splitMany(proxyRaw);

  } else if (mode === 'editor') {
    // –æ—Ç–∫—Ä–æ–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä (–Ω–∞ Windows ‚Äî notepad). –ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–∏–∫ –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞.
    const { bigText } = await inquirer.prompt([{
      type: 'editor',
      name: 'bigText',
      message: '–í—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É). –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏ –∑–∞–∫—Ä–æ–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä.'
    }]);
    incoming = splitMany(bigText);

  } else if (mode === 'file') {
    const { p } = await inquirer.prompt([{
      type: 'input',
      name: 'p',
      message: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–∫—Å–∏:'
    }]);
    try {
      const txt = await fsp.readFile(path.resolve(p), 'utf8');
      incoming = splitMany(txt);
    } catch (e) {
      console.log(chalk.red(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: ${e.message}`));
      return;
    }
  }

  if (!incoming.length) {
    console.log(chalk.yellow('–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.'));
    return;
  }

  // –¥–µ–¥—É–ø: —Å–Ω–∞—á–∞–ª–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ, –∑–∞—Ç–µ–º –Ω–æ–≤—ã–µ
  const before = await readLines(file);
  const set = new Set(before);
  const toAdd = [];

  for (const p of incoming) {
    if (!set.has(p)) {
      set.add(p);
      toAdd.push(p);
    }
  }

  if (!toAdd.length) {
    console.log(chalk.yellow('–í—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.'));
    return;
  }

  const after = [...before, ...toAdd];
  try {
    await writeLines(file, after);
    console.log(chalk.green(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${toAdd.length}. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${after.length}.`));
  } catch (e) {
    console.log(chalk.red(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: ${e.message}`));
  }
}

async function deleteProxy() {
  const file = await ensureFile();
  const lines = await readLines(file);
  if (!lines.length) {
    console.log(chalk.yellow(`‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç (${file})`));
    return;
  }
  const { idxs } = await inquirer.prompt([{
    type: 'checkbox',
    name: 'idxs',
    message: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø—Ä–æ–±–µ–ª ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å, Enter ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å):',
    choices: lines.map((p, i) => ({ name: p, value: i })),
    validate: (arr) => arr.length ? true : '–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É–Ω–∫—Ç',
    loop: false,
    pageSize: Math.min(lines.length, 20)
  }]);

  if (!idxs || !idxs.length) return;

  const keep = lines.filter((_, i) => !idxs.includes(i));
  await writeLines(file, keep);
  console.log(chalk.red(`‚ùå –£–¥–∞–ª–µ–Ω–æ: ${idxs.length}. –û—Å—Ç–∞–ª–æ—Å—å: ${keep.length}.`));
}

module.exports = { listProxies, addProxy, deleteProxy };
