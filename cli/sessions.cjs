// cli/sessions.cjs
/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π –ø—Ä—è–º–æ –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é:
 * - –≤—ã–±–∏—Ä–∞–µ—à—å –∞–∫–∫–∞—É–Ω—Ç—ã (–æ–¥–∏–Ω/–Ω–µ—Å–∫–æ–ª—å–∫–æ),
 * - headless (–æ–±—ã—á–Ω–æ false –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞),
 * - –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–æ–∫—Å–∏ (./data/proxies.txt –∏–ª–∏ ./proxies.txt),
 * - –∑–∞–ø—É—Å–∫–∞–µ–º init-sessions.cjs –∏ —Å—Ç—Ä–∏–º–∏–º –≤—ã–≤–æ–¥.
 *
 * –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å CommonJS, Node 18+.
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const fsp = require('fs/promises');
const inquirer = require('inquirer');
const chalk = require('chalk');

const { listAccounts } = require('./helpers.cjs');

const CANDIDATE_PROXY_FILES = [
  path.resolve('data', 'proxies.txt'),
  path.resolve('proxies.txt'),
];

async function pickProxyFile() {
  const existing = CANDIDATE_PROXY_FILES.filter(p => fs.existsSync(p));
  if (existing.length === 0) {
    const def = CANDIDATE_PROXY_FILES[0];
    await fsp.mkdir(path.dirname(def), { recursive: true });
    await fsp.writeFile(def, '', 'utf8');
    return def;
  }
  if (existing.length === 1) return existing[0];

  const { file } = await inquirer.prompt([{
    type: 'list',
    name: 'file',
    message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–∫—Å–∏. –ö–∞–∫–æ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?',
    choices: existing
  }]);
  return file;
}

function runInitSessions({ accounts, baseDir, proxiesFile, headless }) {
  return new Promise((resolve, reject) => {
    if (!accounts || !accounts.length) {
      return reject(new Error('–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã'));
    }
    const args = [
      path.resolve('init-sessions.cjs'),
      '--accounts', accounts.join(','),
      '--baseDir', baseDir,
      '--proxies', proxiesFile,
      '--headless', String(!!headless)
    ];

    console.log(chalk.cyan('\n‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π:'));
    console.log(chalk.gray(`node ${args.map(a => (/\s/.test(a) ? `"${a}"` : a)).join(' ')}`));

    const child = spawn(process.execPath, args, { stdio: 'inherit' });

    child.once('error', (err) => {
      console.log(chalk.red(`\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ init-sessions: ${err.message}`));
      reject(err);
    });

    child.once('exit', (code) => {
      if (code === 0) {
        console.log(chalk.green('\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'));
        resolve();
      } else {
        console.log(chalk.red(`\n‚ùå init-sessions.cjs –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`));
        reject(new Error(`exit ${code}`));
      }
    });
  });
}

/**
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é.
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É:
 *  - –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (checkbox)
 *  - headless (false –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞)
 *  - baseDir (–æ–±—ã—á–Ω–æ ./profiles)
 *  - –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–æ–∫—Å–∏ (–∞–≤—Ç–æ)
 */
async function initSessionsMenu() {
  const allAccounts = await listAccounts();
  if (allAccounts.length === 0) {
    console.log(chalk.yellow('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã: –ê–∫–∫–∞—É–Ω—Ç—ã ‚Üí –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.'));
    return;
  }

  const answers = await inquirer.prompt([
    {
      type: 'checkbox',
      name: 'selected',
      message: '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–ø—Ä–æ–±–µ–ª ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å, Enter ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å):',
      choices: allAccounts.map(a => ({ name: a, value: a })),
      validate: (arr) => (arr && arr.length) ? true : '–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç'
    },
    {
      type: 'confirm',
      name: 'headless',
      message: '–û—Ç–∫—Ä—ã–≤–∞—Ç—å –±–µ–∑ –æ–∫–Ω–∞ (headless)? (–†–ï–ö–û–ú–ï–ù–î–£–Æ: –ù–µ—Ç ‚Äî —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è)',
      default: false
    },
    {
      type: 'input',
      name: 'baseDir',
      message: '–ü–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π:',
      default: './profiles'
    }
  ]);

  const proxiesFile = await pickProxyFile();

  await runInitSessions({
    accounts: answers.selected,
    baseDir: path.resolve(answers.baseDir),
    proxiesFile,
    headless: answers.headless
  });

  console.log(
    chalk.green(
      '\n–ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä–∏—Ç—å cookies –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é: –ê–∫–∫–∞—É–Ω—Ç—ã ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å cookies.\n' +
      '–î–∞–ª—å—à–µ: ü§ñ –ë–æ—Ç—ã ‚Üí –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.'
    )
  );
}

module.exports = { initSessionsMenu };
